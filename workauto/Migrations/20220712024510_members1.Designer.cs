// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mysqldb;


#nullable disable

namespace workapi.Migrations
{
    [DbContext(typeof(Wxusers))]
    [Migration("20220712024510_members1")]
    partial class members1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("workapi.account.Account", b =>
                {
                    b.Property<string>("Nums")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Birth")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Dept")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Faildate")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Issudate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Legal")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Nation")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Paddress")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Pname")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Pnums")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Range")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Regcapital")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Sex")
                        .HasMaxLength(10)
                        .IsUnicode(true)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Validdate")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Nums");

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("workapi.baiduapi.Aitoken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AiToken")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("aitokens", (string)null);
                });

            modelBuilder.Entity("workapi.Bank", b =>
                {
                    b.Property<string>("bankID")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("bankName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("parentID")
                        .HasColumnType("varchar(20)");

                    b.HasKey("bankID");

                    b.HasIndex("parentID");

                    b.ToTable("Banks", (string)null);
                });

            modelBuilder.Entity("workapi.bankcoord", b =>
                {
                    b.Property<string>("bankID")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<double>("LAT")
                        .HasColumnType("double");

                    b.Property<double>("LON")
                        .HasColumnType("double");

                    b.Property<string>("bankName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("varchar(50)");

                    b.HasKey("bankID");

                    b.ToTable("bankcoords", (string)null);
                });

            modelBuilder.Entity("workapi.corp.Member", b =>
                {
                    b.Property<string>("userid")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("department")
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("varchar(100)");

                    b.HasKey("userid");

                    b.ToTable("members");
                });

            modelBuilder.Entity("workapi.corp.Workdepart", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("name")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("varchar(100)");

                    b.Property<long>("order")
                        .HasColumnType("bigint");

                    b.Property<long>("parentid")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.ToTable("wrokdeparts");
                });

            modelBuilder.Entity("workapi.creditloan.Booking", b =>
                {
                    b.Property<string>("Unionid")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FirstDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Forthdatae")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Information")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsProccess")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nums")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("Seconddatae")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Stage")
                        .HasColumnType("int");

                    b.Property<string>("Straff")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("Thirddatae")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Wxopenid")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("phone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Unionid");

                    b.ToTable("bookings", (string)null);
                });

            modelBuilder.Entity("workapi.creditloan.Rcbstraff", b =>
                {
                    b.Property<string>("Straff")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ace")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BankId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Unionid")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Straff");

                    b.ToTable("rcbstraffs", (string)null);
                });

            modelBuilder.Entity("workapi.Credittoken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("fileId")
                        .HasColumnType("int");

                    b.Property<string>("token")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("credits", (string)null);
                });

            modelBuilder.Entity("workapi.customers", b =>
                {
                    b.Property<string>("openid")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("customerAdr1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("customerAdr2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("customerAdr3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("customerAdr4")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("customerAdr5")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("customerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("customerTel1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("customerTel2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("customerTel3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("customerTel4")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("customerTel5")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("remark")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("straffID")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("unionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("openid");

                    b.HasIndex("straffID");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("workapi.Express", b =>
                {
                    b.Property<string>("expressID")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("phoneLast")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("transID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("expressID");

                    b.HasIndex("transID")
                        .IsUnique();

                    b.ToTable("express", (string)null);
                });

            modelBuilder.Entity("workapi.gold_TBL", b =>
                {
                    b.Property<string>("goldID")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("goldMoney")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("goldName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("goldPro")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("goldSize")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("goldType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("remark")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("goldID");

                    b.ToTable("gold_TBLs", (string)null);
                });

            modelBuilder.Entity("workapi.loanmanager.Contract", b =>
                {
                    b.Property<string>("number")
                        .HasColumnType("varchar(255)");

                    b.Property<double>("money")
                        .HasColumnType("double");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("num")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("product")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("number");

                    b.ToTable("contracts", (string)null);
                });

            modelBuilder.Entity("workapi.loanmanager.hangjob", b =>
                {
                    b.Property<string>("jobid")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Ace")
                        .HasColumnType("int");

                    b.Property<DateTime?>("date_end")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("date_start")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("date_warn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("isdel")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("iswarn")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("procid")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("jobid");

                    b.ToTable("hangjobs", (string)null);
                });

            modelBuilder.Entity("workapi.loanmanager.LoanProcess", b =>
                {
                    b.Property<string>("ProcID")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("bankid")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("bankname")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("date11")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("date12")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("date21")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("date22")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("date31")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("date32")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("date41")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("date42")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("date51")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("date52")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("flag")
                        .HasColumnType("int");

                    b.Property<int?>("loantype")
                        .HasColumnType("int");

                    b.Property<string>("message")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("parentid")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("straff1")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("straff2")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("straff3")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("straff4")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("straff5")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ProcID");

                    b.ToTable("loanProcesses");
                });

            modelBuilder.Entity("workapi.loanmanager.Loans", b =>
                {
                    b.Property<string>("LoanID")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Bankname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Money")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Vdate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("LoanID");

                    b.ToTable("loans", (string)null);
                });

            modelBuilder.Entity("workapi.loanmanager.Loanuser", b =>
                {
                    b.Property<string>("straff")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("Ace")
                        .HasColumnType("int");

                    b.Property<bool?>("IsLogin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsValid")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("bankid")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("straff_name")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("unionid")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("straff");

                    b.ToTable("loanusers");
                });

            modelBuilder.Entity("workapi.myRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("workapi.Order_TBL", b =>
                {
                    b.Property<string>("orderID")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("isCheck")
                        .HasColumnType("int");

                    b.Property<string>("openid")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("orderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("orderInfo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("orderName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("orderTel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("orderTime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("remark")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("straffDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("straffID")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("sub")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("orderID");

                    b.HasIndex("straffID");

                    b.ToTable("Order_TBLs", (string)null);
                });

            modelBuilder.Entity("workapi.printers.Cloudprinter", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Bankcode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Fprname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Gpsflag")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("Lat")
                        .HasColumnType("double");

                    b.Property<double>("Lon")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PrLeft")
                        .HasColumnType("int");

                    b.Property<int>("PrTop")
                        .HasColumnType("int");

                    b.Property<string>("Regcode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Sprname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("straff")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Code");

                    b.ToTable("cloundprinters", (string)null);
                });

            modelBuilder.Entity("workapi.printers.Printers", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("printers");
                });

            modelBuilder.Entity("workapi.rcb.employee", b =>
                {
                    b.Property<string>("EmployeeID")
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)");

                    b.Property<string>("Depart")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DepartID")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("acces")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("EmployeeID");

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("workapi.rcb.wxunionid", b =>
                {
                    b.Property<string>("WxUnionid")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Appopenid")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Gappid")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("Subscribe")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Wxopenid")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Xappid")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("WxUnionid");

                    b.ToTable("unionids", (string)null);
                });

            modelBuilder.Entity("workapi.Straff", b =>
                {
                    b.Property<string>("straffID")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("aceID")
                        .HasColumnType("int");

                    b.Property<string>("acess")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("bankID")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("openid")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("straffAge")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("straffName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("straffSex")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("straffTel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("straffID");

                    b.HasIndex("bankID");

                    b.ToTable("Straffs", (string)null);
                });

            modelBuilder.Entity("workapi.Subankdata", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double>("CR01")
                        .HasColumnType("double");

                    b.Property<double>("CR02")
                        .HasColumnType("double");

                    b.Property<double>("CR03")
                        .HasColumnType("double");

                    b.Property<double>("CR04")
                        .HasColumnType("double");

                    b.Property<double>("CR05")
                        .HasColumnType("double");

                    b.Property<double>("CR06")
                        .HasColumnType("double");

                    b.Property<double>("CR07")
                        .HasColumnType("double");

                    b.Property<double>("CR08")
                        .HasColumnType("double");

                    b.Property<double>("CR09")
                        .HasColumnType("double");

                    b.Property<double>("CR10")
                        .HasColumnType("double");

                    b.Property<double>("Comp1")
                        .HasColumnType("double");

                    b.Property<double>("Comp10")
                        .HasColumnType("double");

                    b.Property<double>("Comp11")
                        .HasColumnType("double");

                    b.Property<double>("Comp12")
                        .HasColumnType("double");

                    b.Property<double>("Comp13")
                        .HasColumnType("double");

                    b.Property<double>("Comp14")
                        .HasColumnType("double");

                    b.Property<double>("Comp15")
                        .HasColumnType("double");

                    b.Property<double>("Comp16")
                        .HasColumnType("double");

                    b.Property<double>("Comp2")
                        .HasColumnType("double");

                    b.Property<double>("Comp3")
                        .HasColumnType("double");

                    b.Property<double>("Comp4")
                        .HasColumnType("double");

                    b.Property<double>("Comp5")
                        .HasColumnType("double");

                    b.Property<double>("Comp6")
                        .HasColumnType("double");

                    b.Property<double>("Comp7")
                        .HasColumnType("double");

                    b.Property<double>("Comp8")
                        .HasColumnType("double");

                    b.Property<double>("Comp9")
                        .HasColumnType("double");

                    b.Property<double>("CustomAdd")
                        .HasColumnType("double");

                    b.Property<double>("CustomeUp")
                        .HasColumnType("double");

                    b.Property<double>("Customvalid")
                        .HasColumnType("double");

                    b.Property<double>("Dept")
                        .HasColumnType("double");

                    b.Property<double>("Deviation")
                        .HasColumnType("double");

                    b.Property<double>("Ebank0")
                        .HasColumnType("double");

                    b.Property<double>("Ebank1")
                        .HasColumnType("double");

                    b.Property<double>("Ebank10")
                        .HasColumnType("double");

                    b.Property<double>("Ebank11")
                        .HasColumnType("double");

                    b.Property<double>("Ebank2")
                        .HasColumnType("double");

                    b.Property<double>("Ebank3")
                        .HasColumnType("double");

                    b.Property<double>("Ebank4")
                        .HasColumnType("double");

                    b.Property<double>("Ebank5")
                        .HasColumnType("double");

                    b.Property<double>("Ebank6")
                        .HasColumnType("double");

                    b.Property<double>("Ebank7")
                        .HasColumnType("double");

                    b.Property<double>("Ebank8")
                        .HasColumnType("double");

                    b.Property<double>("Ebank9")
                        .HasColumnType("double");

                    b.Property<double>("Gold")
                        .HasColumnType("double");

                    b.Property<double>("LowDept")
                        .HasColumnType("double");

                    b.Property<double>("NewDept")
                        .HasColumnType("double");

                    b.Property<double>("PubDept")
                        .HasColumnType("double");

                    b.Property<double>("Risk")
                        .HasColumnType("double");

                    b.Property<double>("Risk01")
                        .HasColumnType("double");

                    b.Property<double>("Risk02")
                        .HasColumnType("double");

                    b.Property<string>("SubName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("varchar(50)");

                    b.Property<double>("TR01")
                        .HasColumnType("double");

                    b.Property<double>("TR02")
                        .HasColumnType("double");

                    b.Property<double>("TR03")
                        .HasColumnType("double");

                    b.Property<double>("Trans1")
                        .HasColumnType("double");

                    b.Property<double>("Trans2")
                        .HasColumnType("double");

                    b.Property<string>("mdate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("nums")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("Subankdatas", (string)null);
                });

            modelBuilder.Entity("workapi.Trans_TBL", b =>
                {
                    b.Property<string>("busID")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("openid")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("prepay_ID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("productID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("remark")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("sendInfo")
                        .HasColumnType("int");

                    b.Property<string>("straffID")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("transBack")
                        .HasColumnType("int");

                    b.Property<DateTime>("transDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("transID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("transMoney")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("transType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("busID");

                    b.HasIndex("productID");

                    b.ToTable("Trans_TBLs", (string)null);
                });

            modelBuilder.Entity("workapi.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Appopenid")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Cname")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("WxUnionid")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Wxopenid")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("workapi.wxsession.Wxsession", b =>
                {
                    b.Property<string>("code")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("sessionkey")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("unionid")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("code");

                    b.ToTable("wxsessions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("workapi.myRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("workapi.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("workapi.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("workapi.myRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("workapi.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("workapi.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("workapi.Bank", b =>
                {
                    b.HasOne("workapi.Bank", "parent")
                        .WithMany("Children")
                        .HasForeignKey("parentID");

                    b.Navigation("parent");
                });

            modelBuilder.Entity("workapi.bankcoord", b =>
                {
                    b.HasOne("workapi.Bank", "bank")
                        .WithOne("bankcoord")
                        .HasForeignKey("workapi.bankcoord", "bankID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("bank");
                });

            modelBuilder.Entity("workapi.customers", b =>
                {
                    b.HasOne("workapi.Straff", "straff")
                        .WithMany()
                        .HasForeignKey("straffID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("straff");
                });

            modelBuilder.Entity("workapi.Express", b =>
                {
                    b.HasOne("workapi.Trans_TBL", "trans")
                        .WithOne("express")
                        .HasForeignKey("workapi.Express", "transID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("trans");
                });

            modelBuilder.Entity("workapi.Order_TBL", b =>
                {
                    b.HasOne("workapi.Straff", "straff")
                        .WithMany("order")
                        .HasForeignKey("straffID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("straff");
                });

            modelBuilder.Entity("workapi.Straff", b =>
                {
                    b.HasOne("workapi.Bank", "bank")
                        .WithMany()
                        .HasForeignKey("bankID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("bank");
                });

            modelBuilder.Entity("workapi.Trans_TBL", b =>
                {
                    b.HasOne("workapi.gold_TBL", "goods")
                        .WithMany()
                        .HasForeignKey("productID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("goods");
                });

            modelBuilder.Entity("workapi.Bank", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("bankcoord")
                        .IsRequired();
                });

            modelBuilder.Entity("workapi.Straff", b =>
                {
                    b.Navigation("order");
                });

            modelBuilder.Entity("workapi.Trans_TBL", b =>
                {
                    b.Navigation("express")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
